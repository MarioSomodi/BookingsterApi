{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Bookingster REST API",
    "description": "REST API for the bookingster app.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "bookingsterapi.oa.r.appspot.com",
  "host1": "localhost:8080",
  "basePath": "/bookingster",
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header",
      "description": "JWT Token for authorization"
    }
  },
  "security": [{ "BearerAuth": [] }],
  "tags": [
    {
      "name": "Admin",
      "description": "Administrative side of the API"
    },
    {
      "name": "Users",
      "description": "Add new users to firestore, edit, read existing etc"
    },
    {
      "name": "Establishments",
      "description": "Add new establishments to firestore, edit, read existing etc"
    },
    {
      "name": "Reservation",
      "description": "Add reservations to firestore, edit, read existing etc"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/admin/configuration": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get configuration such as api keys",
        "responses": {
          "200": {
            "description": "Returns the configuration object containing api keys, etc",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        }
      }
    },
    "/admin/user": {
      "post": {
        "tags": ["Users"],
        "summary": "Add and connect new users UID with firestore DB",
        "parameters": [
          {
            "name": "userInfo",
            "in": "body",
            "description": "User that we want to add and connect. <br/> If authType is 'emailpassword' contains full name in the name field if authType is 'google' it contains first name in the name field and last name in the lastName field. <br/> Account Type can be 0 -> User and 1 -> Establishment Owner",
            "schema": {
              "$ref": "#/definitions/UserInfoPOST"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns the user that was added and connected to firestore",
            "schema": {
              "$ref": "#/definitions/UserInfoGET"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "Get user from firestore",
        "parameters": [
          {
            "name": "UID",
            "in": "query",
            "description": "UID of the user that we want to get",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns the user that was added and connected to firestore",
            "schema": {
              "$ref": "#/definitions/UserInfoGET"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/establishment": {
      "get": {
        "tags": ["Establishments"],
        "summary": "Get all establishments",
        "responses": {
          "200": {
            "description": "A array containing all establishments",
            "schema": {
              "$ref": "#/definitions/EstablishmentsList"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": ["Establishments"],
        "summary": "Add new establishment",
        "parameters": [
          {
            "name": "establishmentInfo",
            "in": "body",
            "description": "Adding a new establishment",
            "schema": {
              "$ref": "#/definitions/EstablishmentPOST"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "Returns the newly created establishment",
            "schema": {
              "$ref": "#/definitions/EstablishmentGET"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/establishment/owner": {
      "get": {
        "tags": ["Establishments"],
        "summary": "Get establishments by their owner.",
        "parameters": [
          {
            "name": "UID",
            "in": "query",
            "description": "UID of the owner whose establishments we wanna get",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns a list of establishment that belong to the sent owner",
            "schema": {
              "$ref": "#/definitions/EstablishmentsList"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/reservation": {
      "post": {
        "tags": ["Reservation"],
        "summary": "Add new reservation",
        "parameters": [
          {
            "name": "reservationInfo",
            "in": "body",
            "description": "Adding a new reservation",
            "schema": {
              "$ref": "#/definitions/ReservationPOST"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns the information about the added reservation",
            "schema": {
              "$ref": "#/definitions/ReservationGET"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/reservation/owner": {
      "get": {
        "tags": ["Reservation"],
        "summary": "Get reservations for specific owners establishments by status",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Returns only reservations in the sent status",
            "required": true,
            "type": "number"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Owners UID it will get only that owners reservations tied to his establishments",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns all reservations in specified status",
            "schema": {
              "$ref": "#/definitions/ReservationsList"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/reservation/user": {
      "get": {
        "tags": ["Reservation"],
        "summary": "Get reservations for specific users by status",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Returns only reservations in the sent status",
            "required": true,
            "type": "number"
          },
          {
            "name": "UID",
            "in": "query",
            "description": "UID it will get only that users reservations",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns all reservations in specified status",
            "schema": {
              "$ref": "#/definitions/ReservationsList"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/reservation/status": {
      "patch": {
        "tags": ["Reservation"],
        "summary": "Change the status of the reservation to a new status",
        "parameters": [
          {
            "name": "newStatus",
            "in": "query",
            "description": "Status to change to",
            "required": true,
            "type": "number"
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "Id of the reservation whose status to change",
            "required": true,
            "type": "string"
          },
          {
            "name": "establishmentOIB",
            "in": "query",
            "description": "Establishment that belongs to the reservation so it's stat about how many times it was reserved can be updated",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Returns true if update was successful otherwise false",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "default": {
            "description": "Unexpected error has happened",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ReservationsList": {
      "properties": {
        "reservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReservationGET"
          }
        }
      }
    },
    "SuccessMessage": {
      "properties": {
        "success": { "type": "boolean" }
      }
    },
    "ReservationPOST": {
      "properties": {
        "establishmentOIB": {
          "type": "string"
        },
        "establishmentOwner": {
          "type": "string"
        },
        "reservedBy": {
          "type": "string"
        },
        "nameOnReservation": {
          "type": "string"
        },
        "reservedFrom": {
          "type": "object",
          "properties": {
            "year": {
              "type": "number"
            },
            "month": {
              "type": "number"
            },
            "day": {
              "type": "number"
            },
            "hours": {
              "type": "number"
            },
            "minutes": {
              "type": "number"
            }
          }
        },
        "places": {
          "type": "number"
        }
      }
    },
    "ReservationGET": {
      "properties": {
        "establishmentOIB": {
          "type": "string"
        },
        "tablesReserved": {
          "type": "number"
        },
        "establishmentOwner": {
          "type": "string"
        },
        "reservedBy": {
          "type": "string"
        },
        "nameOnReservation": {
          "type": "string"
        },
        "reservedFrom": {
          "type": "string"
        },
        "reservedTo": {
          "type": "string"
        },
        "places": {
          "type": "number"
        },
        "reservedTables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableGET"
          }
        },
        "establishment": {
          "$ref": "#/definitions/EstablishmentGET"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "EstablishmentsList": {
      "properties": {
        "establishments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EstablishmentGET"
          }
        }
      }
    },
    "TablesList": {
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableGET"
          }
        }
      }
    },
    "Configuration": {
      "properties": {
        "googleClientId": {
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "fullErrorTrace": {
          "type": "string"
        }
      }
    },
    "TablePOST": {
      "properties": {
        "nChairs": {
          "type": "number"
        },
        "nTables": {
          "type": "number"
        }
      }
    },
    "TableGET": {
      "properties": {
        "capacity": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "reservedBy": {
          "type": "string"
        }
      }
    },
    "EstablishmentPOST": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/imagesPOST"
          }
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "numberOfReservations": {
          "type": "number"
        },
        "oib": {
          "type": "string"
        },
        "workingHours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workHourPOST"
          }
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TablePOST"
          }
        }
      }
    },
    "EstablishmentGET": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/imagesGET"
          }
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "numberOfReservations": {
          "type": "number"
        },
        "oib": {
          "type": "string"
        },
        "workingHours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workHourGET"
          }
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableGET"
          }
        }
      }
    },
    "workHourGET": {
      "properties": {
        "day": {
          "type": "string"
        },
        "index": {
          "type": "number"
        },
        "timeFrom": {
          "type": "string"
        },
        "timeTo": {
          "type": "string"
        }
      }
    },
    "workHourPOST": {
      "properties": {
        "index": {
          "type": "number"
        },
        "day": {
          "type": "string"
        },
        "timeFrom": {
          "type": "object",
          "properties": {
            "hours": {
              "type": "number"
            },
            "minutes": {
              "type": "number"
            }
          }
        },
        "timeTo": {
          "type": "object",
          "properties": {
            "hours": {
              "type": "number"
            },
            "minutes": {
              "type": "number"
            }
          }
        }
      }
    },
    "location": {
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "geoCords": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "double"
            },
            "longitude": {
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    },
    "imagesPOST": {
      "properties": {
        "name": {
          "type": "string"
        },
        "isMain": {
          "type": "boolean"
        },
        "priority": {
          "type": "number"
        },
        "base64": {
          "type": "string"
        }
      }
    },
    "imagesGET": {
      "properties": {
        "name": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isMain": {
          "type": "boolean"
        },
        "priority": {
          "type": "number"
        }
      }
    },
    "UserInfoPOST": {
      "properties": {
        "name": {
          "type": "string"
        },
        "photoURL": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "authType": {
          "type": "string"
        },
        "accountType": {
          "type": "integer"
        },
        "UID": {
          "type": "string"
        }
      }
    },
    "UserInfoGET": {
      "properties": {
        "name": {
          "type": "string"
        },
        "photoURL": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "accountType": {
          "type": "number"
        },
        "UID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    }
  }
}
